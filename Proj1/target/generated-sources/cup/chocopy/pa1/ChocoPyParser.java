
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package chocopy.pa1;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import chocopy.common.astnodes.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ChocoPyParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ChocoPyTokens.class;
}

  /** Default constructor. */
  @Deprecated
  public ChocoPyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ChocoPyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ChocoPyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\002\000\002\003\003\000\002\031\010" +
    "\000\002\031\011\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\005\002\000\002\005\003\000\002" +
    "\005\004\000\002\035\002\000\002\035\005\000\002\035" +
    "\007\000\002\007\002\000\002\007\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\013\007" +
    "\000\002\036\007\000\002\036\010\000\002\036\013\000" +
    "\002\015\007\000\002\015\010\000\002\015\013\000\002" +
    "\014\011\000\002\014\011\000\002\014\011\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\005" +
    "\000\002\010\004\000\002\010\005\000\002\010\004\000" +
    "\002\010\004\000\002\032\017\000\002\032\014\000\002" +
    "\012\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\005\000\002\026\005\000\002\026\006\000\002" +
    "\026\006\000\002\025\005\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\022\007" +
    "\000\002\023\006\000\002\023\006\000\002\023\006\000" +
    "\002\023\006\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\027\005\000\002\027\005\000\002\021\004" +
    "\000\002\021\005\000\002\021\005\000\002\020\004\000" +
    "\002\020\004\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\044\002\ufffe\004\026\005\045\011\041\014" +
    "\027\015\013\023\011\024\037\025\042\026\006\030\044" +
    "\033\021\036\015\046\050\047\036\050\012\053\017\001" +
    "\002\000\004\002\322\001\002\000\046\002\ufff9\003\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\014\ufff9\015\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\030\ufff9\033\ufff9\036\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\053\ufff9\001\002\000\014\014\027\023" +
    "\011\024\037\025\042\027\317\001\002\000\050\002\uffe7" +
    "\003\uffe7\004\uffe7\005\uffe7\006\uffe7\014\uffe7\015\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\033\uffe7\036\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\053\uffe7\054\uffe7\001\002\000" +
    "\054\003\uffcc\004\uffcc\005\uffcc\006\uffcc\012\uffcc\013\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\022\uffcc\031\uffcc\033" +
    "\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\001\002\000\060\003\uffbe\004\uffbe\005" +
    "\uffbe\006\uffbe\012\uffbe\013\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\022\uffbe\027\uffbe\031\uffbe\032\uffbe\033\uffbe\035" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\001\002\000\004\046\277\001\002\000\024\014" +
    "\027\015\013\023\011\024\037\025\042\026\006\030\044" +
    "\036\015\046\062\001\002\000\054\003\uffc7\004\uffc7\005" +
    "\uffc7\006\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\022\uffc7\031\uffc7\033\uffc7\035\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\001\002" +
    "\000\024\014\027\015\013\023\011\024\037\025\042\026" +
    "\006\030\044\036\015\046\062\001\002\000\054\003\uffcd" +
    "\004\uffcd\005\uffcd\006\uffcd\012\uffcd\013\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\020\uffcd\022\uffcd\031\uffcd\033\uffcd\035\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\001\002\000\042\002\uffee\003\uffee\004\uffee\014\uffee" +
    "\015\uffee\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee\033" +
    "\uffee\036\uffee\046\uffee\047\uffee\050\uffee\053\uffee\001\002" +
    "\000\054\003\uffcb\004\uffcb\005\uffcb\006\uffcb\012\uffcb\013" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\022\uffcb\031\uffcb" +
    "\033\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\001\002\000\024\014\027\015\013" +
    "\023\011\024\037\025\042\026\006\030\044\036\015\046" +
    "\062\001\002\000\004\004\216\001\002\000\052\003\uffca" +
    "\004\uffca\005\uffca\006\uffca\013\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\247\022\uffca\026\070\033\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\001" +
    "\002\000\004\004\214\001\002\000\046\002\ufffa\003\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\014\ufffa\015\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\030\ufffa\033\ufffa\036\ufffa\046\ufffa" +
    "\047\ufffa\050\ufffa\053\ufffa\001\002\000\034\004\026\014" +
    "\027\015\013\023\011\024\037\025\042\026\006\030\044" +
    "\033\021\036\015\046\150\047\036\050\012\001\002\000" +
    "\060\003\uffbf\004\uffbf\005\uffbf\006\uffbf\012\uffbf\013\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\022\uffbf\027\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\045\uffbf\001\002\000\050\003" +
    "\uffc8\004\uffc8\005\uffc8\006\uffc8\013\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\243\022\uffc8\033\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\001\002" +
    "\000\054\003\uffc5\004\uffc5\005\uffc5\006\uffc5\012\uffc5\013" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\022\uffc5\031\uffc5" +
    "\033\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\001\002\000\050\002\uffe8\003\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\014\uffe8\015\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\030\uffe8\033\uffe8\036\uffe8\046\uffe8" +
    "\047\uffe8\050\uffe8\053\uffe8\054\uffe8\001\002\000\054\003" +
    "\uffc9\004\uffc9\005\uffc9\006\uffc9\012\uffc9\013\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\022\uffc9\031\uffc9\033\uffc9\035" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\001\002\000\042\002\000\003\241\004\026\014" +
    "\027\015\013\023\011\024\037\025\042\026\006\030\044" +
    "\033\021\036\015\046\150\047\036\050\012\053\240\001" +
    "\002\000\040\002\ufff1\004\026\014\027\015\013\023\011" +
    "\024\037\025\042\026\006\030\044\033\021\036\015\046" +
    "\150\047\036\050\012\053\017\001\002\000\024\014\027" +
    "\015\013\023\011\024\037\025\042\026\006\030\044\036" +
    "\015\046\062\001\002\000\060\003\uffbd\004\uffbd\005\uffbd" +
    "\006\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\022\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\035\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\001\002\000\046\003\uffce\004\uffce\005\uffce\006\uffce" +
    "\013\107\015\100\016\104\017\102\020\106\022\114\033" +
    "\111\037\101\040\116\041\112\042\115\043\103\044\105" +
    "\045\110\001\002\000\004\046\165\001\002\000\060\003" +
    "\uffbc\004\uffbc\005\uffbc\006\uffbc\012\uffbc\013\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\022\uffbc\027\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\001\002\000\050\002\uffe6\003" +
    "\uffe6\004\uffe6\005\uffe6\006\uffe6\014\uffe6\015\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\030\uffe6\033\uffe6\036\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\053\uffe6\054\uffe6\001\002\000\024" +
    "\014\027\015\013\023\011\024\037\025\042\026\006\030" +
    "\044\036\015\046\062\001\002\000\004\046\155\001\002" +
    "\000\044\002\uffef\003\uffef\004\154\014\uffef\015\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\030\uffef\033\uffef\036\uffef" +
    "\046\uffef\047\uffef\050\uffef\053\uffef\054\153\001\002\000" +
    "\042\002\ufffd\003\152\004\ufffd\014\ufffd\015\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\030\ufffd\033\ufffd\036\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\053\ufffd\001\002\000\060\003\uffc6" +
    "\004\uffc6\005\uffc6\006\uffc6\007\055\012\052\013\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\051\022\uffc6\026\053" +
    "\030\054\033\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\001\002\000\024\014\027\015\013" +
    "\023\011\024\037\025\042\026\006\030\044\036\015\046" +
    "\150\001\002\000\004\046\143\001\002\000\006\014\137" +
    "\046\140\001\002\000\026\014\027\015\013\023\011\024" +
    "\037\025\042\026\006\030\044\031\063\036\015\046\062" +
    "\001\002\000\004\046\056\001\002\000\056\003\uffc0\004" +
    "\uffc0\005\uffc0\006\uffc0\012\uffc0\013\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\031\uffc0\033\uffc0\035" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\045\uffc0\001\002\000\040\013\107\015\100\016\104\017" +
    "\102\020\106\022\114\031\113\033\111\037\101\040\116" +
    "\041\112\042\115\043\103\044\105\045\110\001\002\000" +
    "\006\031\075\032\076\001\002\000\056\003\uffca\004\uffca" +
    "\005\uffca\006\uffca\012\uffca\013\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\022\uffca\026\070\031\uffca\033\uffca\035\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\001\002\000\062\003\uffc6\004\uffc6\005\uffc6\006\uffc6" +
    "\007\055\012\uffc6\013\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\022\uffc6\026\053\030\054\031\uffc6\033\uffc6\035\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\001\002\000\054\003\uffc3\004\uffc3\005\uffc3\006\uffc3" +
    "\012\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\022" +
    "\uffc3\031\uffc3\033\uffc3\035\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\001\002\000\054\003" +
    "\uffc8\004\uffc8\005\uffc8\006\uffc8\012\uffc8\013\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\022\uffc8\031\uffc8\033\uffc8\035" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\001\002\000\042\013\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\022\uffcc\031\uffcc\032\066\033\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\001" +
    "\002\000\012\014\027\023\011\024\037\025\042\001\002" +
    "\000\010\027\uffb0\031\uffb0\032\uffb0\001\002\000\006\014" +
    "\071\046\072\001\002\000\004\027\074\001\002\000\004" +
    "\027\073\001\002\000\060\003\uffb8\004\uffb8\005\uffb8\006" +
    "\uffb8\012\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\026\uffb8\031\uffb8\033\uffb8\035\uffb8\037" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\001\002\000\060\003\uffb7\004\uffb7\005\uffb7\006\uffb7\012" +
    "\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\026\uffb7\031\uffb7\033\uffb7\035\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\001\002" +
    "\000\054\003\uffc1\004\uffc1\005\uffc1\006\uffc1\012\uffc1\013" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\022\uffc1\031\uffc1" +
    "\033\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\001\002\000\012\014\027\023\011" +
    "\024\037\025\042\001\002\000\010\027\uffaf\031\uffaf\032" +
    "\uffaf\001\002\000\024\014\027\015\013\023\011\024\037" +
    "\025\042\026\006\030\044\036\015\046\062\001\002\000" +
    "\024\014\027\015\013\023\011\024\037\025\042\026\006" +
    "\030\044\036\015\046\062\001\002\000\024\014\027\015" +
    "\013\023\011\024\037\025\042\026\006\030\044\036\015" +
    "\046\062\001\002\000\024\014\027\015\013\023\011\024" +
    "\037\025\042\026\006\030\044\036\015\046\062\001\002" +
    "\000\024\014\027\015\013\023\011\024\037\025\042\026" +
    "\006\030\044\036\015\046\062\001\002\000\024\014\027" +
    "\015\013\023\011\024\037\025\042\026\006\030\044\036" +
    "\015\046\062\001\002\000\024\014\027\015\013\023\011" +
    "\024\037\025\042\026\006\030\044\036\015\046\062\001" +
    "\002\000\024\014\027\015\013\023\011\024\037\025\042" +
    "\026\006\030\044\036\015\046\062\001\002\000\024\014" +
    "\027\015\013\023\011\024\037\025\042\026\006\030\044" +
    "\036\015\046\062\001\002\000\024\014\027\015\013\023" +
    "\011\024\037\025\042\026\006\030\044\036\015\046\062" +
    "\001\002\000\024\014\027\015\013\023\011\024\037\025" +
    "\042\026\006\030\044\036\015\046\062\001\002\000\054" +
    "\003\uffc2\004\uffc2\005\uffc2\006\uffc2\012\uffc2\013\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\022\uffc2\031\uffc2\033\uffc2" +
    "\035\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\001\002\000\024\014\027\015\013\023\011" +
    "\024\037\025\042\026\006\030\044\036\015\046\062\001" +
    "\002\000\024\014\027\015\013\023\011\024\037\025\042" +
    "\026\006\030\044\036\015\046\062\001\002\000\024\014" +
    "\027\015\013\023\011\024\037\025\042\026\006\030\044" +
    "\036\015\046\062\001\002\000\054\003\uff9d\004\uff9d\005" +
    "\uff9d\006\uff9d\012\uff9d\013\uff9d\015\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\022\uff9d\031\uff9d\033\111\035\uff9d\037\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\001\002" +
    "\000\054\003\uffa7\004\uffa7\005\uffa7\006\uffa7\012\uffa7\013" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\022\uffa7\031\uffa7" +
    "\033\111\035\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\001\002\000\054\003\uff9f\004\uff9f" +
    "\005\uff9f\006\uff9f\012\uff9f\013\107\015\100\016\104\017" +
    "\102\020\106\022\114\031\uff9f\033\111\035\uff9f\037\101" +
    "\040\116\041\112\042\115\043\103\044\105\045\uff9f\001" +
    "\002\000\054\003\uffa8\004\uffa8\005\uffa8\006\uffa8\012\uffa8" +
    "\013\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\022\uffa8\031" +
    "\uffa8\033\111\035\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\001\002\000\040\013\107\015" +
    "\100\016\104\017\102\020\106\022\114\033\111\035\124" +
    "\037\101\040\116\041\112\042\115\043\103\044\105\045" +
    "\110\001\002\000\024\014\027\015\013\023\011\024\037" +
    "\025\042\026\006\030\044\036\015\046\062\001\002\000" +
    "\054\003\uffbb\004\uffbb\005\uffbb\006\uffbb\012\uffbb\013\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\022\uffbb\031\uffbb\033" +
    "\111\035\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\001\002\000\054\003\uffa0\004\uffa0\005" +
    "\uffa0\006\uffa0\012\uffa0\013\107\015\100\016\104\017\102" +
    "\020\106\022\114\031\uffa0\033\111\035\uffa0\037\101\040" +
    "\116\041\112\042\115\043\103\044\105\045\110\001\002" +
    "\000\054\003\uffa9\004\uffa9\005\uffa9\006\uffa9\012\uffa9\013" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\022\uffa9\031\uffa9" +
    "\033\111\035\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\001\002\000\054\003\uffa1\004\uffa1" +
    "\005\uffa1\006\uffa1\012\uffa1\013\107\015\100\016\uffa1\017" +
    "\uffa1\020\uffa1\022\uffa1\031\uffa1\033\111\035\uffa1\037\101" +
    "\040\116\041\112\042\115\043\103\044\105\045\uffa1\001" +
    "\002\000\054\003\uffa5\004\uffa5\005\uffa5\006\uffa5\012\uffa5" +
    "\013\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\022\uffa5\031" +
    "\uffa5\033\111\035\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\001\002\000\054\003\uffa3\004" +
    "\uffa3\005\uffa3\006\uffa3\012\uffa3\013\107\015\100\016\uffa3" +
    "\017\uffa3\020\uffa3\022\uffa3\031\uffa3\033\111\035\uffa3\037" +
    "\101\040\116\041\112\042\115\043\103\044\105\045\uffa3" +
    "\001\002\000\054\003\uffa6\004\uffa6\005\uffa6\006\uffa6\012" +
    "\uffa6\013\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\022\uffa6" +
    "\031\uffa6\033\111\035\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\001\002\000\054\003\uffa2" +
    "\004\uffa2\005\uffa2\006\uffa2\012\uffa2\013\107\015\100\016" +
    "\uffa2\017\uffa2\020\uffa2\022\uffa2\031\uffa2\033\111\035\uffa2" +
    "\037\101\040\116\041\112\042\115\043\103\044\105\045" +
    "\uffa2\001\002\000\054\003\uff9e\004\uff9e\005\uff9e\006\uff9e" +
    "\012\uff9e\013\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\022" +
    "\uff9e\031\uff9e\033\111\035\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\045\uff9e\001\002\000\054\003" +
    "\uffa4\004\uffa4\005\uffa4\006\uffa4\012\uffa4\013\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\022\uffa4\031\uffa4\033\111\035" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\001\002\000\004\027\142\001\002\000\004\027" +
    "\141\001\002\000\060\003\uffba\004\uffba\005\uffba\006\uffba" +
    "\012\uffba\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\026\uffba\031\uffba\033\uffba\035\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\001" +
    "\002\000\060\003\uffb9\004\uffb9\005\uffb9\006\uffb9\012\uffb9" +
    "\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\026\uffb9\031\uffb9\033\uffb9\035\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\001\002\000" +
    "\004\021\144\001\002\000\012\014\027\023\011\024\037" +
    "\025\042\001\002\000\004\004\146\001\002\000\046\002" +
    "\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\014\ufffc\015\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\030\ufffc\033\ufffc\036" +
    "\ufffc\046\ufffc\047\ufffc\050\ufffc\053\ufffc\001\002\000\046" +
    "\003\uffb6\004\uffb6\005\uffb6\006\uffb6\013\107\015\100\016" +
    "\104\017\102\020\106\022\114\033\111\037\101\040\116" +
    "\041\112\042\115\043\103\044\105\045\110\001\002\000" +
    "\056\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\055\013\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\051\022\uffc6\026" +
    "\053\030\054\033\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\001\002\000\012\003\uffb3\004" +
    "\uffb3\005\uffb3\006\uffb3\001\002\000\046\002\ufff8\003\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\014\ufff8\015\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\030\ufff8\033\ufff8\036\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\053\ufff8\001\002\000\050\002\uffe3\003" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\014\uffe3\015\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\030\uffe3\033\uffe3\036\uffe3\046" +
    "\uffe3\047\uffe3\050\uffe3\053\uffe3\054\uffe3\001\002\000\050" +
    "\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\014\uffe5\015" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5\033\uffe5" +
    "\036\uffe5\046\uffe5\047\uffe5\050\uffe5\053\uffe5\054\uffe5\001" +
    "\002\000\004\012\156\001\002\000\004\046\157\001\002" +
    "\000\004\021\160\001\002\000\012\014\027\023\011\024" +
    "\037\025\042\001\002\000\004\006\162\001\002\000\046" +
    "\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\014\ufffb\015" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb\033\ufffb" +
    "\036\ufffb\046\ufffb\047\ufffb\050\ufffb\053\ufffb\001\002\000" +
    "\040\013\107\015\100\016\104\017\102\020\106\022\114" +
    "\031\164\033\111\037\101\040\116\041\112\042\115\043" +
    "\103\044\105\045\110\001\002\000\054\003\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\012\uffc4\013\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\022\uffc4\031\uffc4\033\uffc4\035\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\001" +
    "\002\000\004\030\166\001\002\000\010\031\ufff4\032\ufff4" +
    "\046\170\001\002\000\006\031\174\032\173\001\002\000" +
    "\004\012\171\001\002\000\004\046\172\001\002\000\006" +
    "\031\ufff3\032\ufff3\001\002\000\004\046\227\001\002\000" +
    "\004\010\175\001\002\000\004\046\176\001\002\000\004" +
    "\012\177\001\002\000\004\005\201\001\002\000\010\003" +
    "\222\005\224\006\226\001\002\000\050\003\207\004\026" +
    "\005\045\006\ufff7\011\041\014\027\015\013\023\011\024" +
    "\037\025\042\026\006\030\044\033\021\036\015\046\050" +
    "\047\036\050\012\052\205\053\203\001\002\000\004\006" +
    "\217\001\002\000\010\003\uffd4\005\uffd4\006\uffd4\001\002" +
    "\000\012\003\uffd6\004\216\005\uffd6\006\uffd6\001\002\000" +
    "\024\014\027\015\013\023\011\024\037\025\042\026\006" +
    "\030\044\036\015\046\062\001\002\000\012\003\uffd7\004" +
    "\214\005\uffd7\006\uffd7\001\002\000\010\003\uffd2\005\uffd2" +
    "\006\uffd2\001\002\000\014\003\uffd8\004\154\005\uffd8\006" +
    "\uffd8\054\153\001\002\000\012\003\152\005\045\006\ufff6" +
    "\046\212\001\002\000\004\012\052\001\002\000\004\006" +
    "\ufff5\001\002\000\050\002\uffea\003\uffea\004\uffea\005\uffea" +
    "\006\uffea\014\uffea\015\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\030\uffea\033\uffea\036\uffea\046\uffea\047\uffea\050\uffea" +
    "\053\uffea\054\uffea\001\002\000\044\003\uffd5\005\uffd5\006" +
    "\uffd5\013\107\015\100\016\104\017\102\020\106\022\114" +
    "\033\111\037\101\040\116\041\112\042\115\043\103\044" +
    "\105\045\110\001\002\000\050\002\uffe9\003\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\014\uffe9\015\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\030\uffe9\033\uffe9\036\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\053\uffe9\054\uffe9\001\002\000\004\005\221\001" +
    "\002\000\010\003\222\005\224\006\223\001\002\000\042" +
    "\003\207\004\026\014\027\015\013\023\011\024\037\025" +
    "\042\026\006\030\044\033\021\036\015\046\150\047\036" +
    "\050\012\052\205\053\203\001\002\000\010\003\uffd1\005" +
    "\uffd1\006\uffd1\001\002\000\046\002\uffd0\003\uffd0\004\uffd0" +
    "\005\uffd0\006\uffd0\014\uffd0\015\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\030\uffd0\033\uffd0\036\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\053\uffd0\001\002\000\034\004\026\014\027\015" +
    "\013\023\011\024\037\025\042\026\006\030\044\033\021" +
    "\036\015\046\150\047\036\050\012\001\002\000\014\003" +
    "\uffd3\004\154\005\uffd3\006\uffd3\054\153\001\002\000\046" +
    "\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006\uffcf\014\uffcf\015" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf\033\uffcf" +
    "\036\uffcf\046\uffcf\047\uffcf\050\uffcf\053\uffcf\001\002\000" +
    "\004\012\230\001\002\000\004\046\231\001\002\000\006" +
    "\031\ufff2\032\ufff2\001\002\000\040\012\233\013\107\015" +
    "\100\016\104\017\102\020\106\022\114\033\111\037\101" +
    "\040\116\041\112\042\115\043\103\044\105\045\110\001" +
    "\002\000\004\005\221\001\002\000\010\003\222\005\224" +
    "\006\235\001\002\000\050\002\uffe2\003\uffe2\004\uffe2\005" +
    "\uffe2\006\uffe2\014\uffe2\015\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\030\uffe2\033\uffe2\036\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\053\uffe2\054\uffe2\001\002\000\042\002\ufff0\003\241" +
    "\004\026\014\027\015\013\023\011\024\037\025\042\026" +
    "\006\030\044\033\021\036\015\046\150\047\036\050\012" +
    "\053\240\001\002\000\004\002\uffff\001\002\000\042\002" +
    "\uffed\003\uffed\004\uffed\014\uffed\015\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\030\uffed\033\uffed\036\uffed\046\uffed\047" +
    "\uffed\050\uffed\053\uffed\001\002\000\042\002\uffeb\003\uffeb" +
    "\004\uffeb\014\uffeb\015\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\030\uffeb\033\uffeb\036\uffeb\046\uffeb\047\uffeb\050\uffeb" +
    "\053\uffeb\001\002\000\044\002\uffec\003\uffec\004\154\014" +
    "\uffec\015\uffec\023\uffec\024\uffec\025\uffec\026\uffec\030\uffec" +
    "\033\uffec\036\uffec\046\uffec\047\uffec\050\uffec\053\uffec\054" +
    "\153\001\002\000\024\014\027\015\013\023\011\024\037" +
    "\025\042\026\006\030\044\036\015\046\150\001\002\000" +
    "\046\003\uffb4\004\uffb4\005\uffb4\006\uffb4\013\107\015\100" +
    "\016\104\017\102\020\106\022\114\033\111\037\101\040" +
    "\116\041\112\042\115\043\103\044\105\045\110\001\002" +
    "\000\012\003\uffb1\004\uffb1\005\uffb1\006\uffb1\001\002\000" +
    "\050\002\uffe4\003\uffe4\004\154\005\uffe4\006\uffe4\014\uffe4" +
    "\015\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\033" +
    "\uffe4\036\uffe4\046\uffe4\047\uffe4\050\uffe4\053\uffe4\054\uffe4" +
    "\001\002\000\024\014\027\015\013\023\011\024\037\025" +
    "\042\026\006\030\044\036\015\046\150\001\002\000\046" +
    "\003\uffb5\004\uffb5\005\uffb5\006\uffb5\013\107\015\100\016" +
    "\104\017\102\020\106\022\114\033\111\037\101\040\116" +
    "\041\112\042\115\043\103\044\105\045\110\001\002\000" +
    "\012\003\uffb2\004\uffb2\005\uffb2\006\uffb2\001\002\000\040" +
    "\012\253\013\107\015\100\016\104\017\102\020\106\022" +
    "\114\033\111\037\101\040\116\041\112\042\115\043\103" +
    "\044\105\045\110\001\002\000\004\005\221\001\002\000" +
    "\010\003\222\005\224\006\255\001\002\000\054\002\uffe1" +
    "\003\uffe1\004\uffe1\005\uffe1\006\uffe1\014\uffe1\015\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\033\uffe1\034\260" +
    "\035\256\036\uffe1\046\uffe1\047\uffe1\050\uffe1\053\uffe1\054" +
    "\uffe1\001\002\000\004\012\272\001\002\000\050\002\uffe0" +
    "\003\uffe0\004\uffe0\005\uffe0\006\uffe0\014\uffe0\015\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\033\uffe0\036\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\053\uffe0\054\uffe0\001\002\000" +
    "\024\014\027\015\013\023\011\024\037\025\042\026\006" +
    "\030\044\036\015\046\062\001\002\000\040\012\262\013" +
    "\107\015\100\016\104\017\102\020\106\022\114\033\111" +
    "\037\101\040\116\041\112\042\115\043\103\044\105\045" +
    "\110\001\002\000\004\005\221\001\002\000\010\003\222" +
    "\005\224\006\264\001\002\000\054\002\uffde\003\uffde\004" +
    "\uffde\005\uffde\006\uffde\014\uffde\015\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\030\uffde\033\uffde\034\260\035\265\036" +
    "\uffde\046\uffde\047\uffde\050\uffde\053\uffde\054\uffde\001\002" +
    "\000\004\012\267\001\002\000\050\002\uffdd\003\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\014\uffdd\015\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\030\uffdd\033\uffdd\036\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\053\uffdd\054\uffdd\001\002\000\004\005\221" +
    "\001\002\000\010\003\222\005\224\006\271\001\002\000" +
    "\050\002\uffdc\003\uffdc\004\uffdc\005\uffdc\006\uffdc\014\uffdc" +
    "\015\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\033" +
    "\uffdc\036\uffdc\046\uffdc\047\uffdc\050\uffdc\053\uffdc\054\uffdc" +
    "\001\002\000\004\005\221\001\002\000\010\003\222\005" +
    "\224\006\274\001\002\000\050\002\uffdf\003\uffdf\004\uffdf" +
    "\005\uffdf\006\uffdf\014\uffdf\015\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\030\uffdf\033\uffdf\036\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\053\uffdf\054\uffdf\001\002\000\054\003\uffaa\004" +
    "\uffaa\005\uffaa\006\uffaa\012\uffaa\013\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\022\uffaa\031\uffaa\033\uffaa\035\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa" +
    "\001\002\000\054\003\uffab\004\uffab\005\uffab\006\uffab\012" +
    "\uffab\013\uffab\015\uffab\016\uffab\017\uffab\020\uffab\022\uffab" +
    "\031\uffab\033\111\035\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\001\002\000\004\051\300" +
    "\001\002\000\010\025\302\026\006\046\303\001\002\000" +
    "\004\012\312\001\002\000\004\012\307\001\002\000\004" +
    "\012\304\001\002\000\004\005\221\001\002\000\010\003" +
    "\222\005\224\006\306\001\002\000\050\002\uffda\003\uffda" +
    "\004\uffda\005\uffda\006\uffda\014\uffda\015\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\030\uffda\033\uffda\036\uffda\046\uffda" +
    "\047\uffda\050\uffda\053\uffda\054\uffda\001\002\000\004\005" +
    "\221\001\002\000\010\003\222\005\224\006\311\001\002" +
    "\000\050\002\uffd9\003\uffd9\004\uffd9\005\uffd9\006\uffd9\014" +
    "\uffd9\015\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\030\uffd9" +
    "\033\uffd9\036\uffd9\046\uffd9\047\uffd9\050\uffd9\053\uffd9\054" +
    "\uffd9\001\002\000\004\005\221\001\002\000\010\003\222" +
    "\005\224\006\314\001\002\000\050\002\uffdb\003\uffdb\004" +
    "\uffdb\005\uffdb\006\uffdb\014\uffdb\015\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\030\uffdb\033\uffdb\036\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\053\uffdb\054\uffdb\001\002\000\006\027\321" +
    "\032\066\001\002\000\006\027\320\032\076\001\002\000" +
    "\054\003\uffae\004\uffae\005\uffae\006\uffae\012\uffae\013\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\022\uffae\031\uffae\033" +
    "\uffae\035\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\045\uffae\001\002\000\054\003\uffac\004\uffac\005" +
    "\uffac\006\uffac\012\uffac\013\uffac\015\uffac\016\uffac\017\uffac" +
    "\020\uffac\022\uffac\031\uffac\033\uffac\035\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\001\002" +
    "\000\054\003\uffad\004\uffad\005\uffad\006\uffad\012\uffad\013" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\022\uffad\031\uffad" +
    "\033\uffad\035\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\054\002\003\003\034\004\046\006\033\011" +
    "\045\012\023\013\031\014\006\016\037\017\032\020\015" +
    "\021\017\022\013\023\022\024\021\025\027\026\030\030" +
    "\007\031\024\032\004\036\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\315\030\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\016\275\017\032\020\015\021\017\022" +
    "\013\023\060\025\063\026\030\030\007\001\001\000\002" +
    "\001\001\000\024\016\274\017\032\020\015\021\017\022" +
    "\013\023\060\025\063\026\030\030\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\016" +
    "\251\017\032\020\015\021\017\022\013\023\060\025\063" +
    "\026\030\030\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\011\245" +
    "\012\023\013\031\014\006\016\037\017\032\020\015\021" +
    "\017\022\013\023\022\024\021\025\027\026\030\030\007" +
    "\036\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\011\241\012\023\013\031\014\006\016\037\017\032\020" +
    "\015\021\017\022\013\023\022\024\021\025\027\026\030" +
    "\030\007\036\042\001\001\000\044\006\235\007\236\011" +
    "\045\012\023\013\031\014\006\016\037\017\032\020\015" +
    "\021\017\022\013\023\022\024\021\025\027\026\030\030" +
    "\007\036\042\001\001\000\024\016\231\017\032\020\015" +
    "\021\017\022\013\023\060\025\063\026\030\030\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\016\162\017" +
    "\032\020\015\021\017\022\013\023\060\025\063\026\030" +
    "\030\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\016\146\017\032" +
    "\020\015\021\017\022\013\023\022\024\150\025\027\026" +
    "\030\030\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\016\056\017\032\020\015\021\017\022\013\023" +
    "\060\025\063\026\030\027\057\030\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\076\001\001\000\002\001\001" +
    "\000\024\016\135\017\032\020\015\021\017\022\013\023" +
    "\060\025\063\026\030\030\007\001\001\000\024\016\134" +
    "\017\032\020\015\021\017\022\013\023\060\025\063\026" +
    "\030\030\007\001\001\000\024\016\133\017\032\020\015" +
    "\021\017\022\013\023\060\025\063\026\030\030\007\001" +
    "\001\000\024\016\132\017\032\020\015\021\017\022\013" +
    "\023\060\025\063\026\030\030\007\001\001\000\024\016" +
    "\131\017\032\020\015\021\017\022\013\023\060\025\063" +
    "\026\030\030\007\001\001\000\024\016\130\017\032\020" +
    "\015\021\017\022\013\023\060\025\063\026\030\030\007" +
    "\001\001\000\024\016\127\017\032\020\015\021\017\022" +
    "\013\023\060\025\063\026\030\030\007\001\001\000\024" +
    "\016\126\017\032\020\015\021\017\022\013\023\060\025" +
    "\063\026\030\030\007\001\001\000\024\016\125\017\032" +
    "\020\015\021\017\022\013\023\060\025\063\026\030\030" +
    "\007\001\001\000\024\016\122\017\032\020\015\021\017" +
    "\022\013\023\060\025\063\026\030\030\007\001\001\000" +
    "\024\016\121\017\032\020\015\021\017\022\013\023\060" +
    "\025\063\026\030\030\007\001\001\000\002\001\001\000" +
    "\024\016\120\017\032\020\015\021\017\022\013\023\060" +
    "\025\063\026\030\030\007\001\001\000\024\016\117\017" +
    "\032\020\015\021\017\022\013\023\060\025\063\026\030" +
    "\030\007\001\001\000\024\016\116\017\032\020\015\021" +
    "\017\022\013\023\060\025\063\026\030\030\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\016\124\017\032" +
    "\020\015\021\017\022\013\023\060\025\063\026\030\030" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\177\001" +
    "\001\000\002\001\001\000\050\004\210\005\201\011\207" +
    "\012\205\013\031\014\006\016\037\017\032\020\015\021" +
    "\017\022\013\023\022\024\203\025\027\026\030\030\007" +
    "\031\024\032\004\036\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\016\214\017\032" +
    "\020\015\021\017\022\013\023\060\025\063\026\030\030" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\217\001\001\000\002\001\001\000" +
    "\040\011\207\012\205\013\031\014\006\016\037\017\032" +
    "\020\015\021\017\022\013\023\022\024\203\025\027\026" +
    "\030\030\007\036\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\011\224\012\023\013\031\014\006\016" +
    "\037\017\032\020\015\021\017\022\013\023\022\024\021" +
    "\025\027\026\030\030\007\036\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\011\241" +
    "\012\023\013\031\014\006\016\037\017\032\020\015\021" +
    "\017\022\013\023\022\024\021\025\027\026\030\030\007" +
    "\036\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\016\243\017\032" +
    "\020\015\021\017\022\013\023\022\024\244\025\027\026" +
    "\030\030\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\016\247\017\032\020\015\021" +
    "\017\022\013\023\022\024\250\025\027\026\030\030\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\253\001\001\000\002\001\001\000\004" +
    "\015\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\016\260\017\032\020\015\021\017\022\013\023\060" +
    "\025\063\026\030\030\007\001\001\000\002\001\001\000" +
    "\004\010\262\001\001\000\002\001\001\000\004\015\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ChocoPyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ChocoPyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ChocoPyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* The following fields and methods deal with error reporting
     * Avoid changing these unless you know what you are doing. */

    /** Node that accumulates error messages to be added to the Program
     *  node produced as a result. */
    public final Errors errors = new Errors(new ArrayList<>());

    /** Return the Program node that results from parsing the stream of
     *  tokens produced by lexical analysis.  In the case of syntax errors,
     *  the program may be empty, but will have error messages. */
    public Program parseProgram(boolean debug) {
        try {
            Symbol result = debug ? debug_parse() : parse();
            if (result == null || !(result.value instanceof Program)) {
                return new Program(new Location(0, 0), new Location(0, 0),
                                   new ArrayList<Declaration>(),
                                   new ArrayList<Stmt>(),
                                   errors);
            } else {
                return (Program) result.value;
            }
        } catch (RuntimeException excp) {
            throw excp;
        } catch (Exception excp) {
            String msg =
                String.format("Internal parser error detected: %s%n", excp);
            throw new AssertionError(msg);
        }
    }

    @Override
    public SymbolFactory getSymbolFactory() {
        return ((ChocoPyLexer) getScanner()).symbolFactory;
    }

    @Override
    public void syntax_error(Symbol cur_token) {
                String token = symbl_name_from_id(cur_token.sym);
                String text = ((ChocoPyLexer) getScanner()).yytext();
                errors.syntaxError(
                    ((ComplexSymbolFactory.ComplexSymbol) cur_token).xleft,
                    ((ComplexSymbolFactory.ComplexSymbol) cur_token).xright,
                    "Parse error near token %s: %s", token, text);
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
        /* Do not die */
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ChocoPyParser$actions {



    /** Return a mutable list initially containing the single value ITEM. */
    <T> List<T> single(T item) {
        List<T> list = new ArrayList<>();
        if (item != null) {
            list.add(item);
        }
        return list;
    }

    /** If ITEM is non-null, appends it to the end of LIST.  Then returns
     *  LIST. */
    <T> List<T> combine(List<T> list, T item) {
        if (item != null) {
            list.add(item);
        }
        return list;
    }

    /** Return a mutable empty list. */
    <T> List<T> empty() {
        return new ArrayList<T>();
    }

    /** Return the leftmost non-whitespace location in NODES, or null if NODES
     *  is empty.  Assumes that the nodes of NODES are ordered in increasing
     *  order of location, from left to right. */
    ComplexSymbolFactory.Location getLeft(List<? extends Node> nodes) {
        if (nodes.isEmpty()) {
            return null;
        }
        Node first = nodes.get(0);
        return new ComplexSymbolFactory.Location(first.getLocation()[0],
                                                 first.getLocation()[1]);
    }

    boolean allowDeclarations = true;

  private final ChocoPyParser parser;

  /** Constructor */
  CUP$ChocoPyParser$actions(ChocoPyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ChocoPyParser$do_action_part00000000(
    int                        CUP$ChocoPyParser$act_num,
    java_cup.runtime.lr_parser CUP$ChocoPyParser$parser,
    java.util.Stack            CUP$ChocoPyParser$stack,
    int                        CUP$ChocoPyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ChocoPyParser$result;

      /* select the action based on the action number */
      switch (CUP$ChocoPyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		RESULT = start_val;
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ChocoPyParser$parser.done_parsing();
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmt_list 
            {
              Program RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> s = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new Program(getLeft(s),
                                    sxright, empty(), s, errors);
            
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program_head opt_stmt_list 
            {
              Program RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> d = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> s = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new Program(d.isEmpty() ? getLeft(s) : getLeft(d),
                                    sxright, d, s, errors);
            
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_head ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program_head",1, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_head ::= global_declarations 
            {
              List<Declaration> RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Declaration> g = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = g; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("program_head",1, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_def ::= IDENTIFIER COLON IDENTIFIER ASSIGNMENT literal NEWLINE 
            {
              Declaration RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xright;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Literal e3 = (Literal)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		  
                // System.out.println("vardef");
                ClassType className = new ClassType(e2xleft, e2xright, e2); 
                Identifier name = new Identifier(e1xleft, e1xright, e1);
                TypedVar curr = new TypedVar(e1xleft, e2xright, name, className);
                RESULT = new VarDef(e1xleft, e3xright, curr, e3);
            
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("var_def",23, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_def ::= INDENT IDENTIFIER COLON IDENTIFIER ASSIGNMENT literal DEDENT 
            {
              Declaration RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xright;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Literal e3 = (Literal)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		  
                ClassType className = new ClassType(e2xleft, e2xright, e2); 
                Identifier name = new Identifier(e1xleft, e1xright, e1);
                TypedVar curr = new TypedVar(e1xleft, e2xright, name, className);
                RESULT = new VarDef(e1xleft, e3xright, curr, e3);
            
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("var_def",23, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global_declarations ::= var_def 
            {
              List<Declaration> RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Declaration v = (Declaration)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(v); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("global_declarations",2, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global_declarations ::= function 
            {
              List<Declaration> RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Declaration f = (Declaration)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(f); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("global_declarations",2, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // global_declarations ::= global_declarations error 
            {
              List<Declaration> RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> g = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		
                System.out.println("here!");
                RESULT = g;
            
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("global_declarations",2, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration_list ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration_list ::= global_declarations 
            {
              List<Declaration> RESULT =null;
		Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Declaration> g = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = g; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration_list ::= global_declarations var_def 
            {
              List<Declaration> RESULT =null;
		Location g1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location g1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Declaration> g1 = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Declaration v = (Declaration)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(g1, v); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list ::= 
            {
              List<TypedVar> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("param_list",27, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= IDENTIFIER COLON IDENTIFIER 
            {
              List<TypedVar> RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
                ClassType className = new ClassType(e2xleft, e2xright, e2); 
                Identifier name = new Identifier(e1xleft, e1xright, e1);
                RESULT = single(new TypedVar(e1xleft, e2xright, name, className)); 
            
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("param_list",27, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param_list ::= param_list COMMA IDENTIFIER COLON IDENTIFIER 
            {
              List<TypedVar> RESULT =null;
		Location p1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location p1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		List<TypedVar> p1 = (List<TypedVar>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  ClassType className = new ClassType(e2xleft, e2xright, e2); 
                Identifier name = new Identifier(e1xleft, e1xright, e1);
                RESULT = combine(p1, new TypedVar(e1xleft, e2xright, name, className)); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("param_list",27, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opt_stmt_list ::= 
            {
              List<Stmt> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("opt_stmt_list",5, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opt_stmt_list ::= stmt_list 
            {
              List<Stmt> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		List<Stmt> s = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("opt_stmt_list",5, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt_list ::= stmt 
            {
              List<Stmt> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(s); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt_list ::= PASS 
            {
              List<Stmt> RESULT =null;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt_list ::= stmt_list PASS 
            {
              List<Stmt> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> l = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = l; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt_list ::= stmt_list stmt 
            {
              List<Stmt> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> l = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(l, s); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt_list ::= stmt_list error 
            {
              List<Stmt> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> l = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = l; 
                
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= expr_stmt NEWLINE 
            {
              Stmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = s; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= assign_stmt NEWLINE 
            {
              Stmt RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		AssignStmt a = (AssignStmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = a; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= while_stmt 
            {
              Stmt RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt w = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= for_stmt 
            {
              Stmt RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt f = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= if_stmt 
            {
              Stmt RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		IfStmt i = (IfStmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= stmt NEWLINE 
            {
              Stmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = s; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= NEWLINE stmt 
            {
              Stmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= stmt UNRECOGNIZED 
            {
              Stmt RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String d = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		   
                        System.out.println("error is: " + d); // here?
                        errors.add(new CompilerError(dxleft, dxright, d, false));
                        RESULT = s;
                    
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // while_stmt ::= WHILE expr COLON block DEDENT 
            {
              Stmt RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
            RESULT = new WhileStmt(opxleft, dxleft, e, b); 
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("while_stmt",9, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if_stmt ::= IF expr COLON block DEDENT 
            {
              IfStmt RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
            RESULT = new IfStmt(opxleft, dxleft, e, b, empty()); 
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("if_stmt",28, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if_stmt ::= IF expr COLON block DEDENT elif_stmt 
            {
              IfStmt RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt el = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
            RESULT = new IfStmt(opxleft, elxleft, e, b, single(el));
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("if_stmt",28, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if_stmt ::= IF expr COLON block DEDENT ELSE COLON block DEDENT 
            {
              IfStmt RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location b2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location b2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> b2 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location d2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location d2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Integer d2 = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
            RESULT = new IfStmt(opxleft, dxleft, e, b, b2); 
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("if_stmt",28, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elif_stmt ::= ELIF expr COLON block DEDENT 
            {
              Stmt RESULT =null;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		String el = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		
            RESULT = new IfStmt(elxleft, dxleft, e, b, empty());
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("elif_stmt",11, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // elif_stmt ::= ELIF expr COLON block DEDENT elif_stmt 
            {
              Stmt RESULT =null;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xright;
		String el = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location chainxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location chainxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt chain = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		
            RESULT = new IfStmt(elxleft, chainxleft, e, b, single(chain));
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("elif_stmt",11, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elif_stmt ::= ELIF expr COLON block DEDENT ELSE COLON block DEDENT 
            {
              Stmt RESULT =null;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).xright;
		String el = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-7)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location b2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location b2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> b2 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location d2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location d2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Integer d2 = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		
            RESULT = new IfStmt(elxleft, dxleft, e, b, b2);
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("elif_stmt",11, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // for_stmt ::= FOR IDENTIFIER IN list_obj COLON block DEDENT 
            {
              Stmt RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  
            Identifier x = new Identifier(idxleft, idxright, id);
            RESULT = new ForStmt(opxleft, dxleft, x, l, b);
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("for_stmt",10, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // for_stmt ::= FOR IDENTIFIER IN IDENTIFIER COLON block DEDENT 
            {
              Stmt RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		String l = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		
            Identifier x1 = new Identifier(idxleft, idxright, id);
            Identifier x2 = new Identifier(lxleft, lxright, l);
            RESULT = new ForStmt(opxleft, dxleft, x1, x2, b);
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("for_stmt",10, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // for_stmt ::= FOR IDENTIFIER IN STRINGLITERAL COLON block DEDENT 
            {
              Stmt RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-5)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		
            Identifier x = new Identifier(idxleft, idxright, id);
            StringLiteral l = new StringLiteral(sxleft, sxright, s);
            RESULT = new ForStmt(opxleft, dxleft, x, l, b);
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("for_stmt",10, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // block ::= INDENT stmt 
            {
              List<Stmt> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
            RESULT = single(s); 
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // block ::= INDENT expr_stmt 
            {
              List<Stmt> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
            RESULT = single(s); 
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // block ::= INDENT assign_stmt 
            {
              List<Stmt> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		AssignStmt a = (AssignStmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = single(a); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // block ::= INDENT RETURN expr 
            {
              List<Stmt> RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String r = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
            RESULT = single(new ReturnStmt(rxleft, exright, e)); 
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // block ::= INDENT PASS 
            {
              List<Stmt> RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = empty(); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // block ::= block INDENT stmt 
            {
              List<Stmt> RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = combine(b, s2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // block ::= INDENT error 
            {
              List<Stmt> RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		
            errors.add(new CompilerError(dxleft, dxright, "Indent/Dedent 1", true));
            RESULT = empty();
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // block ::= block error 
            {
              List<Stmt> RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		
            errors.add(new CompilerError(dxleft, dxright, "Indent/Dedent 2", true));
            RESULT = b;
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // function ::= DEF IDENTIFIER LPARENTHESES param_list RPARENTHESES RIGHTARROW IDENTIFIER COLON INDENT declaration_list DEDENT block DEDENT 
            {
              Declaration RESULT =null;
		Location startxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-12)).xleft;
		Location startxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-12)).xright;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-12)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-11)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-11)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-11)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xright;
		List<TypedVar> p = (List<TypedVar>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).value;
		Location rtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xleft;
		Location rtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xright;
		String rt = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		List<Declaration> d = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location endxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location endxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Integer end = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  Identifier funcName = new Identifier(idxleft, idxright, id);
            TypeAnnotation returnType = new ClassType(rtxleft, rtxright, rt);
            RESULT = new FuncDef(startxleft, endxleft, funcName, p, returnType, d, b);
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("function",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-12)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function ::= DEF IDENTIFIER LPARENTHESES param_list RPARENTHESES RIGHTARROW IDENTIFIER COLON block DEDENT 
            {
              Declaration RESULT =null;
		Location startxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xleft;
		Location startxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).xright;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-8)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).xright;
		List<TypedVar> p = (List<TypedVar>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-6)).value;
		Location rtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location rtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		String rt = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Stmt> b = (List<Stmt>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location endxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location endxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Integer end = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  
            Identifier funcName = new Identifier(idxleft, idxright, id);
            TypeAnnotation returnType = new ClassType(rtxleft, rtxright, rt);
            RESULT = new FuncDef(startxleft, endxleft, funcName, p, returnType, empty(), b);
        
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("function",24, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-9)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_stmt ::= expr 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new ExprStmt(exleft, exright, e); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr_stmt",8, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= unary_expr 
            {
              Expr RESULT =null;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = u; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= literal 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= list_obj 
            {
              Expr RESULT =null;
		Location lsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location lsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr ls = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= index_expr 
            {
              Expr RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		IndexExpr i = (IndexExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= binary_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= member_expr 
            {
              Expr RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		MemberExpr m = (MemberExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = m; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= if_inline 
            {
              Expr RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= IDENTIFIER 
            {
              Expr RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new Identifier(ixleft, ixright, i); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= call_expr 
            {
              Expr RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		CallExpr c = (CallExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= LPARENTHESES expr RPARENTHESES 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		 RESULT = e; 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // call_expr ::= IDENTIFIER LPARENTHESES RPARENTHESES 
            {
              CallExpr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String l = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String r = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
                RESULT = new CallExpr(idxleft, idxright, new Identifier(idxleft, idxright, id), empty()); 
            
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("call_expr",20, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // call_expr ::= IDENTIFIER LPARENTHESES expr RPARENTHESES 
            {
              CallExpr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String l = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String r = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  
                RESULT = new CallExpr(idxleft, rxleft, new Identifier(idxleft, idxright, id), single(e)); 
            
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("call_expr",20, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // call_expr ::= IDENTIFIER LPARENTHESES list_contents RPARENTHESES 
            {
              CallExpr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String l = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location lsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Expr> ls = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String r = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  
                RESULT = new CallExpr(idxleft, rxleft, new Identifier(idxleft, idxright, id), ls); 
            
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("call_expr",20, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // member_expr ::= IDENTIFIER DOT IDENTIFIER 
            {
              MemberExpr RESULT =null;
		Location i1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location i1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location i2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location i2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  Identifier obj = new Identifier(i1xleft, i1xright, i1);
                Identifier member = new Identifier(i2xleft, i2xright, i2);
                RESULT = new MemberExpr(i1xleft, i2xright, obj, member); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("member_expr",19, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literal ::= NUMBER 
            {
              Literal RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new IntegerLiteral(nxleft, nxright, n); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal ::= BOOLEANLITERALS 
            {
              Literal RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String b = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BooleanLiteral(bxleft, bxright, Boolean.valueOf(b)); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literal ::= NONELITERAL 
            {
              Literal RESULT =null;
		Location nonexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location nonexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String none = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new NoneLiteral(nonexleft, nonexright); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literal ::= STRINGLITERAL 
            {
              Literal RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new StringLiteral(sxleft, sxright, s); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_inline ::= expr IF expr ELSE expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location op3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location op3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
                    RESULT = new IfExpr(e1xleft, e1xright, e2, e1, e3); 
                
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("if_inline",16, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // index_expr ::= IDENTIFIER LBRACKET IDENTIFIER RBRACKET 
            {
              IndexExpr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location lbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String lb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  // x[a] 
                        Expr idExpr = new Identifier(idxleft, idxright, id);
                        Expr indexExpr = new Identifier(exleft, exright, e);
                        RESULT = new IndexExpr(idxleft, rbxright, idExpr, indexExpr);
                    
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("index_expr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // index_expr ::= IDENTIFIER LBRACKET NUMBER RBRACKET 
            {
              IndexExpr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location lbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String lb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  // x[a] 
                        Expr idExpr = new Identifier(idxleft, idxright, id);
                        Expr indexExpr = new IntegerLiteral(exleft, exright, e);
                        RESULT = new IndexExpr(idxleft, rbxright, idExpr, indexExpr);
                    
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("index_expr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // index_expr ::= index_expr LBRACKET IDENTIFIER RBRACKET 
            {
              IndexExpr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		IndexExpr id = (IndexExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location lbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String lb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  // x[a][a] or x[1][a]
                        Expr indexExpr = new Identifier(exleft, exright, e);
                        RESULT = new IndexExpr(idxleft, rbxright, id, indexExpr);
                    
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("index_expr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // index_expr ::= index_expr LBRACKET NUMBER RBRACKET 
            {
              IndexExpr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).xright;
		IndexExpr id = (IndexExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)).value;
		Location lbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String lb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  // x[a][a] or x[1][a]
                        Expr indexExpr = new IntegerLiteral(exleft, exright, e);
                        RESULT = new IndexExpr(idxleft, rbxright, id, indexExpr);
                    
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("index_expr",17, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assign_stmt ::= IDENTIFIER ASSIGNMENT expr 
            {
              AssignStmt RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  List<Expr> targets = single(new Identifier(idxleft, idxright, id));
                    RESULT = new AssignStmt(idxleft, e2xright, targets, e2); 
                
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_stmt",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assign_stmt ::= index_expr ASSIGNMENT expr 
            {
              AssignStmt RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		IndexExpr i = (IndexExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  List<Expr> targets = single(i);
                    RESULT = new AssignStmt(ixleft, e2xright, targets, e2); 
                
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_stmt",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assign_stmt ::= member_expr ASSIGNMENT expr 
            {
              AssignStmt RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		MemberExpr m = (MemberExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		
                    List<Expr> targets = single(m);
                    RESULT = new AssignStmt(mxleft, e2xright, targets, e2);
                
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_stmt",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assign_stmt ::= IDENTIFIER ASSIGNMENT assign_stmt 
            {
              AssignStmt RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location a1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location a1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		AssignStmt a1 = (AssignStmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		  
                    List<Expr> new_targets = single(new Identifier(ixleft, ixright, i));
                    new_targets.addAll(a1.targets);
                    RESULT = new AssignStmt(ixleft, a1xright, new_targets, a1.value); 
                
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_stmt",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assign_stmt ::= index_expr ASSIGNMENT assign_stmt 
            {
              AssignStmt RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		IndexExpr i = (IndexExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location a1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location a1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		AssignStmt a1 = (AssignStmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		
                    List<Expr> new_targets = single(i);
                    new_targets.addAll(a1.targets);
                    RESULT = new AssignStmt(ixleft, a1xright, new_targets, a1.value); 
                
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_stmt",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assign_stmt ::= member_expr ASSIGNMENT assign_stmt 
            {
              AssignStmt RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		MemberExpr m = (MemberExpr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location a1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location a1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		AssignStmt a1 = (AssignStmt)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		
                    List<Expr> new_targets = single(m);
                    new_targets.addAll(a1.targets);
                    RESULT = new AssignStmt(mxleft, a1xright, new_targets, a1.value);
                
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("assign_stmt",18, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // list_contents ::= literal COMMA literal 
            {
              List<Expr> RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Literal e1 = (Literal)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Literal e2 = (Literal)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
                ArrayList<Expr> curr = new ArrayList<>();
                curr.add(e1);
                curr.add(e2);
                RESULT = curr;
            
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("list_contents",21, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // list_contents ::= list_contents COMMA literal 
            {
              List<Expr> RESULT =null;
		Location lcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		List<Expr> lc = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Literal e1 = (Literal)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		
                RESULT = combine(lc, e1);
            
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("list_contents",21, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // list_obj ::= LBRACKET RBRACKET 
            {
              Expr RESULT =null;
		Location lbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String lb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
                    RESULT = new ListExpr(lbxleft, rbxright, empty()); 
                
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("list_obj",15, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // list_obj ::= LBRACKET literal RBRACKET 
            {
              Expr RESULT =null;
		Location lbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String lb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
                    RESULT = new ListExpr(lbxleft, rbxright, single(e)); 
                
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("list_obj",15, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // list_obj ::= LBRACKET list_contents RBRACKET 
            {
              Expr RESULT =null;
		Location lbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location lbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		String lb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location lcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location lcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		List<Expr> lc = (List<Expr>)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location rbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location rbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		String rb = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 
                    RESULT = new ListExpr(lbxleft, rbxright, lc);
                
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("list_obj",15, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // unary_expr ::= MINUS expr 
            {
              Expr RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr u = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new UnaryExpr(opxleft, uxright, op, u); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("unary_expr",14, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // unary_expr ::= NOT expr 
            {
              Expr RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT =  new UnaryExpr(e1xleft, e1xright, op, e1); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("unary_expr",14, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binary_expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		
                            RESULT = new BinaryExpr(e1xleft, e2xright,
                                                   e1, op, e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binary_expr ::= expr GT expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft, e2xright,
                                                   e1, op, e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // binary_expr ::= expr LT expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft, e2xright,
                                                   e1, op, e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binary_expr ::= expr GTE expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft, e2xright,
                                                   e1, op, e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // binary_expr ::= expr LTE expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft, e2xright,
                                                   e1, op, e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // binary_expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft, e2xright,
                                                   e1, op, e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // binary_expr ::= expr MULTIPLY expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft, e2xright,
                                                   e1, op, e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // binary_expr ::= expr MODULUS expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft, e2xright,
                                                   e1, op, e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // binary_expr ::= expr FLOORDIVISION expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft, e2xright,
                                                   e1, op, e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // binary_expr ::= expr EQ expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft, e2xright,
                                                   e1, op, e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // binary_expr ::= expr EXPONENT expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft, e2xright,
                                                   e1, op, e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // binary_expr ::= expr AND expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // binary_expr ::= expr OR expr 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ChocoPyParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ChocoPyParser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); 
              CUP$ChocoPyParser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.elementAt(CUP$ChocoPyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChocoPyParser$stack.peek()), RESULT);
            }
          return CUP$ChocoPyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ChocoPyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ChocoPyParser$do_action(
    int                        CUP$ChocoPyParser$act_num,
    java_cup.runtime.lr_parser CUP$ChocoPyParser$parser,
    java.util.Stack            CUP$ChocoPyParser$stack,
    int                        CUP$ChocoPyParser$top)
    throws java.lang.Exception
    {
              return CUP$ChocoPyParser$do_action_part00000000(
                               CUP$ChocoPyParser$act_num,
                               CUP$ChocoPyParser$parser,
                               CUP$ChocoPyParser$stack,
                               CUP$ChocoPyParser$top);
    }
}

}
